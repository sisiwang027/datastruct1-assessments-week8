Part 1: Discussion Questions

Make a new file and add your answers to the questions below. 
Push the file to your github repository along with the other solutions.


***************************************
Runtime
***************************************
1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the 
length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. 
You can think of the workload as the number of tasks required to complete a job. 
What determines the workload of figuring out whether your box of animal crackers contains an elephant?

Answers: The total number of animal crackers determines the workload.


2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) 
as n approaches infinity:
O(log n)
O(n^2)
O(n log n)
O(n)
O(2^n)
O(1)
(Hint: to write exponents in a text file, use a carrot, like so: n^2 or 2^n.)

Answer: O(1), O(log n), O(n), O(nlogn), O(n^2), O(2^n)

***************************************
Stacks and Queues
***************************************

1. In the following cases, would a stack or queue be a more appropriate data structure?
   1.1 The process of loading and unloading pallets onto a flatbed truck
   1.2 Putting bottle caps on bottles of beer as they roll down an assembly line
   1.3 Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)

Answer: 1.1 stack
        1.2 queue
        1.3 stack


2. Describe two more situations where a queue would be an appropriate data structure.

Answer: Wating list in a restaurant, the first customers in waiting list shoult get the table firstly.
        Orders when we shop on line, the first order will be processed firstly.


3. Describe two more situations where a stack would be an appropriate data structure.

Answer: Tower of Hanoi, the last plate which is put in the stick will be out firstly.
        When functions are called in one function, the function called lastly will run firstly.


***************************************
Linked Lists
***************************************

1. Given the linked list below, which are the nodes? What is the data for each node? 
Where is the head? Where is the tail? 
(Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

Answer: Node object Apple is a node whose data is string "Apple";
        Node object Berry a node whose data is string "Berry";
        Node object Cherry a node whose data is string "Cherry";
        Head attribute of llist is node object Apple;
        For the LLIST, there is no tail attribute. But node object Cherry is the last node, because its next attribute is None.


2. What’s the difference between doubly- and singly-linked lists?

Answer: Singly- linked lists just have next attribute, and doubly-linked lists have next and previous attributes.


3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

Answer: If we have tail in a linked list, we don't need to check if the next attribute of each node object is None or not, whose run time is O(n),
        and we can find the tail using one step, and run time is O(1). 


***************************************
Trees
***************************************

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node 
until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) 
Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer: Order is food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos.



2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer: Order is food, Mexican, enchiladas, tacos, burritos, Indian, saag, tikka masala, Italian, pizza, Sicilian, New York-style, Chicago-style.


3. How is a binary search tree different from other trees?

Answer: In binary search tree, each node just has two or less children nodes, which are left, right or None.
Left or right nodes follow a same rule, such as all left nodes are smaller than their parent node, and all right nodes are bigger than their parent node.















